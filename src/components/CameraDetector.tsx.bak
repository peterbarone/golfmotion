'use client'

import { useRef, useEffect, useState } from 'react'
import Webcam from 'react-webcam'
// Use MediaPipe Pose from the window object instead of npm package import
// Extend Window interface to include the MediaPipe object
declare global {
  interface Window {
    Pose?: any;
  }
}

// Import types from @mediapipe/pose but not constants
import type { NormalizedLandmark, NormalizedLandmarkList } from '@mediapipe/pose'
import { useSwingStore } from '../store/swingStore'
import { useToast } from './ui/Toast'
import { 
  Box, 
  Button, 
  CircularProgress, 
  Typography, 
  Paper, 
  Alert, 
  IconButton, 
  Stack,
  Chip
} from '@mui/material'
import { 
  PlayArrow, 
  Stop, 
  Videocam, 
  VideocamOff, 
  FiberManualRecord 
} from '@mui/icons-material'

// Pose landmarks of interest for golf swing detection
const LANDMARKS = {
  LEFT_SHOULDER: 11,
  RIGHT_SHOULDER: 12,
  LEFT_ELBOW: 13,
  RIGHT_ELBOW: 14,
  LEFT_WRIST: 15,
  RIGHT_WRIST: 16,
  LEFT_HIP: 23,
  RIGHT_HIP: 24,
}

// Configurables
const DETECTION_CONFIDENCE = 0.7
const BACKSWING_THRESHOLD = 0.7  // How far back wrist needs to move (ratio)
const DOWNSWING_THRESHOLD = 0.6  // How far down wrist needs to move (ratio)
const FPS = 30

const CameraDetector = () => {
  // References
  const webcamRef = useRef<Webcam>(null)
  const poseRef = useRef<any>(null)  // Use any for now to bypass type issues
  const requestRef = useRef<number>(0)
  
  // Local state
  const [isLoading, setIsLoading] = useState(true)
  const [hasPermission, setHasPermission] = useState<boolean | null>(null)
  const [errorMessage, setErrorMessage] = useState<string | null>(null)
  
  // Store state & actions
  const {
    swingState,
    cameraEnabled,
    detectionActive,
    selectedCameraDeviceId, // Added
    handedness,             // Added
    startSwing,
    recordTransition,
    finishSwing,
    setCameraEnabled,
    setDetectionActive,
  } = useSwingStore()
  
  const toast = useToast()
  
  // Position tracking
  const startPositionRef = useRef<{ x: number, y: number } | null>(null)
  const maxBackswingRef = useRef<{ x: number, y: number } | null>(null)
  
  // Initialize MediaPipe Pose
  useEffect(() => {
    if (!cameraEnabled || poseRef.current) return
    
    const loadPose = async () => {
      try {
        setIsLoading(true)
        console.log('Loading MediaPipe Pose...')
        
        // Access Pose from window object
        // MediaPipe script adds pose to window object but may need time to load
        const waitForPose = () => {
          return new Promise<any>((resolve, reject) => {
            const timeout = setTimeout(() => {
              reject(new Error('MediaPipe Pose script loading timed out'))
            }, 10000) // 10 seconds timeout
            
            const checkForPose = () => {
              // Check for pose at global level
              if (window.Pose) {
                clearTimeout(timeout)
                resolve(window.Pose)
                return
              }
              
              setTimeout(checkForPose, 100)
            }
            
            checkForPose()
          })
        }
        
        // Wait for and get the Pose constructor
        const PoseConstructor = await waitForPose()
        console.log('Found MediaPipe Pose constructor:', PoseConstructor)
        
        // Create the pose instance
        const pose = new PoseConstructor({
          locateFile: (file: string) => {
            console.log(`Loading MediaPipe file: ${file}`)
            return `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`
          }
        })
        
        console.log('Setting Pose options...')
        pose.setOptions({
          modelComplexity: 1,
          smoothLandmarks: true,
          minDetectionConfidence: DETECTION_CONFIDENCE,
          minTrackingConfidence: DETECTION_CONFIDENCE
        })
        
        console.log('Setting onResults handler...')
        pose.onResults(onPoseResults)
        
        poseRef.current = pose
        setIsLoading(false)
        console.log('MediaPipe Pose initialized successfully')
        toast('Pose detection ready', { type: 'success' })
      } catch (err) {
        console.error('Failed to initialize Pose:', err)
        const errorMsg = err instanceof Error ? err.message : 'Unknown error'
        setErrorMessage(`Failed to load pose detection: ${errorMsg}`)
        setCameraEnabled(false)
        setIsLoading(false)
      }
    }
    
    // Add a small delay before loading Pose to ensure webcam is initialized
    const timer = setTimeout(() => {
      console.log('Starting Pose loading sequence...')
      loadPose()
    }, 1000)
    
    return () => {
      clearTimeout(timer)
      if (poseRef.current) {
        console.log('Cleaning up Pose instance')
        poseRef.current.close()
        poseRef.current = null
      }
    }
  }, [cameraEnabled, setCameraEnabled, toast])
  
  // Request animation frame loop for pose detection
  useEffect(() => {
    let lastFrameTime = 0
    const frameDuration = 1000 / FPS
    let errorCount = 0
    const MAX_ERRORS = 5
    
    const detectPose = async (timestamp: number) => {
      if (!detectionActive || !poseRef.current) {
        requestRef.current = requestAnimationFrame(detectPose)
        return
      }
      
      // Throttle FPS
      if (timestamp - lastFrameTime < frameDuration) {
        requestRef.current = requestAnimationFrame(detectPose)
        return
      }
      
      lastFrameTime = timestamp
      
      if (!webcamRef.current) {
        console.log('Webcam reference not available yet')
        requestRef.current = requestAnimationFrame(detectPose)
        return
      }
      
      const webcam = webcamRef.current.video
      if (webcam && webcam.readyState === 4) {
        try {
          await poseRef.current.send({ image: webcam })
          // Reset error count on success
          if (errorCount > 0) {
            console.log('Pose detection resumed successfully')
            errorCount = 0
          }
        } catch (err) {
          errorCount++
          console.error(`Error in pose detection (${errorCount}/${MAX_ERRORS}):`, err)
          
          // If we've had too many errors, stop detection
          if (errorCount >= MAX_ERRORS) {
            console.error('Too many pose detection errors, stopping detection')
            const errorMsg = err instanceof Error ? err.message : 'Unknown error'
            setErrorMessage(`Pose detection failed repeatedly: ${errorMsg}`)
            setDetectionActive(false)
            return
          }
        }
      } else if (webcam) {
        console.log(`Webcam not ready yet, readyState: ${webcam.readyState}`)
      } else {
        console.log('Webcam element is null')
      }
      
      requestRef.current = requestAnimationFrame(detectPose)
    }
    
    if (cameraEnabled) {
      console.log('Starting pose detection animation frame loop')
      requestRef.current = requestAnimationFrame(detectPose)
    }
    
    return () => {
      console.log('Cleaning up pose detection loop')
      cancelAnimationFrame(requestRef.current)
    }
  }, [cameraEnabled, detectionActive, setDetectionActive])
  
  // Handler for pose detection results
  const onPoseResults = (results: any) => {
    if (!results.poseLandmarks || !detectionActive) return
    
    const landmarks = results.poseLandmarks
    
    // Determine landmarks based on handedness
    const wristLandmark = handedness === 'left' ? LANDMARKS.LEFT_WRIST : LANDMARKS.RIGHT_WRIST
    const shoulderLandmark = handedness === 'left' ? LANDMARKS.LEFT_SHOULDER : LANDMARKS.RIGHT_SHOULDER

    const targetWrist = landmarks[wristLandmark]
    const targetShoulder = landmarks[shoulderLandmark]
    
    // Check if landmarks have sufficiently high confidence
    if (!targetWrist || !targetShoulder ||
        targetWrist.visibility < DETECTION_CONFIDENCE ||
        targetShoulder.visibility < DETECTION_CONFIDENCE) {
      return
    }
    
    // Get position relative to the shoulder
    // For a right-handed golfer, a backswing moves wrist to the left (negative x relative to shoulder)
    // For a left-handed golfer, a backswing moves wrist to the right (positive x relative to shoulder)
    // We can normalize this by multiplying by -1 for left-handers if needed, or adjust thresholds.
    // Current thresholds (BACKSWING_THRESHOLD, DOWNSWING_THRESHOLD) are positive, expecting decrease in X for backswing.
    // Let's adjust wristPos.x so that for both handedness, backswing is a negative/decreasing X value.
    let wristXRelativeToShoulder = targetWrist.x - targetShoulder.x
    if (handedness === 'left') {
      wristXRelativeToShoulder = -wristXRelativeToShoulder // Invert X-axis for left-handed
    }

    const wristPos = {
      x: wristXRelativeToShoulder,
      y: targetWrist.y - targetShoulder.y // Y-axis remains the same
    }
    
    // Handle different swing states
    switch (swingState) {
      case 'ready':
        // Save initial position as reference
        startPositionRef.current = wristPos
        startSwing()
        toast('Backswing detected', { type: 'info', duration: 1000 })
        break
        
      case 'backswing':
        // Track maximum backswing position (wrist moving back and up)
        if (maxBackswingRef.current) {
          if (wristPos.x < maxBackswingRef.current.x) {
            maxBackswingRef.current = wristPos
          }
          
          // Check if forward motion is detected after backswing
          const backswingMovement = Math.abs(maxBackswingRef.current.x - startPositionRef.current!.x)
          const forwardMovement = wristPos.x - maxBackswingRef.current.x
          
          if (backswingMovement > BACKSWING_THRESHOLD && forwardMovement > 0.1) {
            recordTransition()
            toast('Transition detected', { type: 'info', duration: 1000 })
          }
        } else {
          maxBackswingRef.current = wristPos
        }
        break
        
      case 'downswing':
        // Check if downswing is complete
        if (startPositionRef.current) {
          // Check if wrist has moved down past starting position
          const downswingComplete = wristPos.y > (startPositionRef.current.y + DOWNSWING_THRESHOLD)
          
          if (downswingComplete) {
            finishSwing()
            
            // Reset tracking references
            startPositionRef.current = null
            maxBackswingRef.current = null
          }
        }
        break
        
      default:
        break
    }
  }
  
  const handleToggleDetection = () => {
    if (!cameraEnabled) {
      setCameraEnabled(true)
    }
    setDetectionActive(!detectionActive)
    
    // Reset tracking when toggling detection
    startPositionRef.current = null
    maxBackswingRef.current = null
    
    if (!detectionActive) {
      toast('Auto detection enabled', { type: 'info' })
    } else {
      toast('Auto detection disabled', { type: 'info' })
    }
  }
  
  // Request camera permission
  useEffect(() => {
    if (!cameraEnabled) return
    
    console.log('Checking camera permissions...')
    
    const checkPermission = async () => {
      try {
        console.log('Requesting camera access...')
        const stream = await navigator.mediaDevices.getUserMedia({
          video: selectedCameraDeviceId
            ? { deviceId: { exact: selectedCameraDeviceId } }
            : true
        })
        console.log('Camera permission granted')
        setHasPermission(true)
        stream.getTracks().forEach(track => track.stop())
      } catch (err) {
        console.error('Camera permission denied:', err)
        setHasPermission(false)
        const errorMsg = err instanceof Error ? err.message : 'Please allow access to your camera.'
        setErrorMessage(`Camera permission denied: ${errorMsg}`)
        setCameraEnabled(false)
      }
    }
    
    checkPermission()
  }, [cameraEnabled, setCameraEnabled, selectedCameraDeviceId])
  
  const renderDisabledView = () => {
    return (
      <div className="text-center p-6 bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-900 rounded-xl shadow-inner">
  
  if (hasPermission === false) {
    return (
      <div className="text-center p-4 bg-red-50 text-red-600 rounded-md">
        <p>Camera access denied. Please allow camera access in your browser settings and reload the page.</p>
        <button 
          onClick={() => setCameraEnabled(false)}
          className="mt-2 py-1 px-3 bg-gray-200 rounded hover:bg-gray-300 transition-colors"
        >
          Dismiss
        </button>
      </div>
    )
  }
  
  if (isLoading) {
    return (
      <div className="text-center p-4">
        <svg className="inline-block animate-spin h-6 w-6 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        <p className="mt-2 text-gray-600">Loading pose detection...</p>
      </div>
    )
  }
  
  if (errorMessage) {
    return (
      <div className="text-center p-4 bg-red-50 text-red-600 rounded-md">
        <p>{errorMessage}</p>
        <button 
          onClick={() => setCameraEnabled(false)}
          className="mt-2 py-1 px-3 bg-gray-200 rounded hover:bg-gray-300 transition-colors"
        >
          Dismiss
        </button>
      </div>
    )
  }
  
  return (
    <div className="mt-4 mb-4">
      <div className={`relative overflow-hidden rounded-md ${detectionActive ? 'border-2 border-green-500' : 'border border-gray-300'}`}>
        <Webcam
          ref={webcamRef}
          audio={false}
          mirrored={true}
          videoConstraints={
            selectedCameraDeviceId
              ? { deviceId: { exact: selectedCameraDeviceId }, width: { ideal: 640 }, height: { ideal: 360 } }
              : { facingMode: 'user', width: { ideal: 640 }, height: { ideal: 360 } }
          }
          className="w-full"
        />
        <div className="absolute top-2 right-2">
          <div className={`w-3 h-3 rounded-full ${detectionActive ? 'bg-green-500 animate-pulse' : 'bg-gray-400'}`}></div>
        </div>
      </div>
      
      <div className="flex justify-between mt-2">
        <button
          onClick={handleToggleDetection}
          className={`py-2 px-4 rounded-md flex items-center gap-2 ${
            detectionActive 
              ? 'bg-red-100 text-red-600 hover:bg-red-200' 
              : 'bg-green-100 text-green-600 hover:bg-green-200'
          }`}
        >
          {detectionActive ? (
            <>
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 00-1 1v4a1 1 0 001 1h4a1 1 0 001-1V8a1 1 0 00-1-1H8z" clipRule="evenodd" />
              </svg>
              Stop Detection
            </>
          ) : (
            <>
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clipRule="evenodd" />
              </svg>
              Start Detection
            </>
          )}
        </button>
        
        <button
          onClick={() => setCameraEnabled(false)}
          className="py-2 px-4 bg-gray-200 rounded-md hover:bg-gray-300 transition-colors"
        >
          Hide Camera
        </button>
      </div>
      
      <div className="mt-2 text-xs text-gray-500">
        <p className="mb-1">Position yourself so your full upper body is visible.</p>
        <p>Make your backswing and downswing at normal speed.</p>
      </div>
    </div>
  )
}

export default CameraDetector
